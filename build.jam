import lib/CommonTools/boost-build/features/freertos ;
import lib/CommonTools/boost-build/features/thor ;
import lib/CommonTools/boost-build/features/chimera ;

# ====================================================
# Local Rules 
# ====================================================
local rule explicit_alias ( name : sources * : requirements * : default-build * : usage-requirements * )
    {
    alias $(name) : $(sources) : $(requirements) : $(default-build) : $(usage-requirements) ;
    explicit $(name) ;
    }

# ====================================================
# Local Resources 
# ====================================================
# ------------------------------------------
# Build Target Specific Options 
# ------------------------------------------
local dbg_defs = DEBUG ;
local dbg_cflags = -ggdb -Og ;

local rel_defs = NDEBUG ;
local rel_cflags = -O3 ;

# ------------------------------------------
# CFlags generic enough to not be processor specific.
# Only applies to FreeRTOS and are not propagated.
# ------------------------------------------
local requirements_cflags = 
    -fno-common
    -fmessage-length=0
    -fno-exceptions
    -ffunction-sections
    -fdata-sections
    -Wall
    --std=gnu11 
    ;

# ------------------------------------------
# Source/Include Directories 
# ------------------------------------------
local rtos_inc_dir = include ;
local rtos_gcc_dir = portable/GCC ;
local rtos_msvc_dir = portable/MSVC-MingW ;
local rtos_mem_mang_dir = portable/MemMang ;

# ------------------------------------------
# Source Files
# ------------------------------------------
local rtos_root_src = [ glob *.c ] ;
local rtos_common_src = portable/Common/mpu_wrappers.c ;
local rtos_src = $(rtos_root_src) ;

# ====================================================
# Project Definition
# ====================================================
project FreeRTOS : usage-requirements <include>$(rtos_inc_dir) ;

# ====================================================
# Heap selection targets for the desired memory management strategy
# ====================================================
# ------------------------------------------
# Simplest type. Does not permit memory to be freed.
# ------------------------------------------
lib HEAP
    :   $(rtos_mem_mang_dir)/heap_1.c

    :   <FreeRTOS>enabled-heap1
        <link>static
        <include>$(rtos_inc_dir) 
        <use>DEVICE_TARGET_PUB
        <use>/PRJ//FREERTOS_CFG
        <use>/PRJ//TARGET_OPTIONS       # Compiler flags and settings
    ;

# ------------------------------------------
# Permits memory to be freed, but does not coalescence adjacent free blocks.
# ------------------------------------------
lib HEAP
    :   $(rtos_mem_mang_dir)/heap_2.c

    :   <FreeRTOS>enabled-heap2
        <link>static
        <include>$(rtos_inc_dir) 
        <use>DEVICE_TARGET_PUB
        <use>/PRJ//FREERTOS_CFG
        <use>/PRJ//TARGET_OPTIONS       # Compiler flags and settings
    ;

# ------------------------------------------
# Simply wraps the standard malloc() and free() for thread safety.
# ------------------------------------------
lib HEAP
    :   $(rtos_mem_mang_dir)/heap_3.c

    :   <FreeRTOS>enabled-heap3
        <link>static
        <include>$(rtos_inc_dir) 
        <use>DEVICE_TARGET_PUB
        <use>/PRJ//FREERTOS_CFG
        <use>/PRJ//TARGET_OPTIONS       # Compiler flags and settings
    ;

# ------------------------------------------
# Coalescences adjacent free blocks to avoid fragmentation. 
# Includes absolute address placement option.
# ------------------------------------------
lib HEAP
    :   $(rtos_mem_mang_dir)/heap_4.c

    :   <FreeRTOS>enabled-heap4
        <link>static
        <include>$(rtos_inc_dir) 
        <use>DEVICE_TARGET_PUB
        <use>/PRJ//FREERTOS_CFG
        <use>/PRJ//TARGET_OPTIONS       # Compiler flags and settings
    ;

# ------------------------------------------
# As per heap_4, with the ability to span the heap across 
# multiple non-adjacent memory areas.
# ------------------------------------------
lib HEAP
    :   $(rtos_mem_mang_dir)/heap_5.c

    :   <FreeRTOS>enabled-heap5
        <link>static
        <include>$(rtos_inc_dir)
        <use>DEVICE_TARGET_PUB
        <use>/PRJ//FREERTOS_CFG
        <use>/PRJ//TARGET_OPTIONS       # Compiler flags and settings
    ;

explicit HEAP ;

# ====================================================
# Port Specific Targets
# ====================================================
# ------------------------------------------
# STM32F4 Port
# ------------------------------------------
lib DEVICE_TARGET
    :   $(rtos_gcc_dir)/ARM_CM4F/port.c

    :   <FreeRTOS>enabled-CortexM
        <Thor>enabled-F4
        <include>$(rtos_inc_dir)
        <include>$(rtos_gcc_dir)/ARM_CM4F
        <use>/PRJ//FREERTOS_CFG

        <library>HEAP
    :
    :   <include>$(rtos_gcc_dir)/ARM_CM4F
        <use>/PRJ//FREERTOS_CFG
    ;

alias DEVICE_TARGET_PUB 
    : 
    :   <Thor>enabled-F4 
    :
    :   <include>$(rtos_gcc_dir)/ARM_CM4F
    ;

# ------------------------------------------
# STM32F7 Port
# ------------------------------------------
lib DEVICE_TARGET
    :   $(rtos_gcc_dir)/ARM_CM7/r0p1/port.c

    :   <FreeRTOS>enabled-CortexM  
        <Thor>enabled-F7
        <include>$(rtos_inc_dir)
        <include>$(rtos_gcc_dir)/ARM_CM7/r0p1
        <use>/PRJ//FREERTOS_CFG

        <library>HEAP
    : 
    :   <include>$(rtos_gcc_dir)/ARM_CM7/r0p1
        <use>/PRJ//FREERTOS_CFG 
    ;

alias DEVICE_TARGET_PUB 
    : 
    :   <Thor>enabled-F7
    :
    :   <include>$(rtos_gcc_dir)/ARM_CM7/r0p1
    ;

# ------------------------------------------
# Windows Simulator Port
# ------------------------------------------
lib DEVICE_TARGET
    :   $(rtos_msvc_dir)/port.c
    
    :   <FreeRTOS>enabled-Windows
        <include>$(rtos_inc_dir)
        <include>$(rtos_msvc_dir)

        <use>/PRJ//FREERTOS_CFG

        <library>HEAP
    : 
    :   <include>$(rtos_msvc_dir)
        <use>/PRJ//FREERTOS_CFG
        <linkflags>-lwinmm              # Required for some timer functionality
    ;

alias DEVICE_TARGET_PUB 
    : 
    :   <FreeRTOS-port>Windows 
    :
    :   <include>$(rtos_msvc_dir)
    ;

# ------------------------------------------
# Posix Simulator Port
# ------------------------------------------
lib DEVICE_TARGET
    :   $(rtos_gcc_dir)/Posix/port.c

    :   <FreeRTOS>enabled-Posix
        <include>$(rtos_inc_dir)
        <include>$(rtos_gcc_dir)/Posix
        <include>/usr/include
        <include>/usr/include/x86_64-linux-gnu
        <use>/PRJ//FREERTOS_CFG

        <library>HEAP
    :
    :   <include>$(rtos_gcc_dir)/Posix
        <use>/PRJ//FREERTOS_CFG
    ;

alias DEVICE_TARGET_PUB 
    : 
    :   <FreeRTOS-port>Posix 
    :
    :   <include>$(rtos_gcc_dir)/Posix
    ;

explicit DEVICE_TARGET ;
explicit DEVICE_TARGET_PUB ;

# ====================================================
# FreeRTOS Library Components
# ====================================================

# ------------------------------------------
# Allows a target to import common headers. 
# Automatically derives the port specific headers.
# ------------------------------------------
explicit_alias PUB 
    : 
    : 
    : 
    :   <include>$(rtos_inc_dir)    # Standard FreeRTOS includes
        <use>DEVICE_TARGET_PUB      # Device port specific includes 
    ;

# ------------------------------------------
# Builds the entire FreeRTOS Core + Port source
# ------------------------------------------
lib CORE
    :   $(rtos_src)

    :   <FreeRTOS>enabled
        <link>static
        <include>$(rtos_inc_dir)

        <use>/PRJ//FREERTOS_CFG
        <use>DEVICE_TARGET_PUB
        
        <library>DEVICE_TARGET
    :   
    :   <use>PUB
        <use>DEVICE_TARGET
    ;

explicit CORE ;

# ------------------------------------------
# Export aliases for testing builds on the command line
# ------------------------------------------
explicit_alias FREERTOS_CORE : CORE ;
explicit_alias FREERTOS_DEVICE : DEVICE_TARGET ;
